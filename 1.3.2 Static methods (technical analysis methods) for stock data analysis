class Stock_Methods:

    @staticmethod
    def ma(stock, window):
        data = stock.selected_line_info.values
        index = stock.selected_line_info.index
        ma = pd.rolling_mean(data, window)
        ma = pd.Series(ma, index=index)
        return ma
    @staticmethod
    def ewma(stock, alpha):
        data = stock.selected_line_info.values
        index =stock.selected_line_info.index
        span = 2 / alpha - 1
        ema = pd.ewma(data, span=span)
        ewma = pd.Series(ema, index=index)
        return ewma

    @staticmethod
    def MACD(stock,span1=12,span2=26,span3=9):
        data = stock.selected_line_info.values
        index = stock.selected_line_info.index
        span12=span1
        span26=span2
        ema12=pd.ewma(data,span12)
        ema26=pd.ewma(data,span26)
        macd_12_26=ema12-ema26
        macd_ema = pd.rolling_mean(macd_12_26, span3)
        macd_sig=macd_12_26-macd_ema
        macd_12_26=pd.Series(macd_12_26,index=index)
        macd_ema=pd.Series(macd_ema,index=index)
        macd_sig=pd.Series(macd_sig,index=index)

        return macd_12_26,macd_ema,macd_sig



    @staticmethod
    def rsi(stock, window):
        data = stock.selected_line_info.values
        index = stock.selected_line_info.index
        delta = np.diff(data)
        up, down = delta.copy(), delta.copy()
        up[up < 0] = 0
        down[down > 0] = 0
        rup = pd.rolling_mean(up, window)
        rdown = pd.rolling_mean(down, window)
        rdown = np.abs(rdown)
        rsi = rup / rdown
        rsi = 100 - (100 / (1.0 + rsi))
        rsi = np.concatenate(([np.nan], rsi), axis=0)
        rsi = pd.Series(rsi, index=index)
        return rsi

    @staticmethod
    def bband(stock, window, num_std):
        data = stock.selected_line_info.values
        index = stock.selected_line_info.index
        ma = pd.rolling_mean(data, window)
        std = pd.rolling_std(data, window)
        upper = ma + std * num_std
        lower = ma - std * num_std
        bband_ma = pd.Series(ma, index=index)
        bband_upper = pd.Series(upper, index=index)
        bband_lower = pd.Series(lower, index=index)
        return bband_upper,bband_lower,bband_ma
    @staticmethod
    def OBV(stock):
        price_data=stock.selected_line_info.values
        index=stock.selected_line_info.index
        volume_data=stock.selected_line_info_volume.values

    # For OBV
        price_delta=np.diff(price_data)
        price_delta[price_delta>=0]=1
        price_delta[price_delta<0]=-1
        obv=[]
        zero_temp=[np.nan]
        for i in range(len(price_delta)):
            delta_temp = price_delta[:(i + 1)]
            volume_temp= volume_data[:i + 1]
            obv.append(np.dot(delta_temp,volume_temp))
        obv=np.concatenate((zero_temp,obv))
        on_balance_volume=pd.Series(obv,index=index)

    # For volume with different colors~~
        price_delta_temp=np.diff(price_data)
        price_delta_up,price_delta_down=price_delta_temp.copy(),price_delta.copy()
        price_delta_up[price_delta_up>=0]=1
        price_delta_up[price_delta_up<0]=0
        price_delta_down[price_delta_down>=0]=0
        price_delta_down[price_delta_down<0]=1

        price_delta_up=np.concatenate(([0],price_delta_up))
        price_delta_down=np.concatenate(([0],price_delta_down))


        volume_data_up=volume_data*price_delta_up
        volume_data_down=volume_data*price_delta_down

        volume_data_up=pd.Series(volume_data_up,index=index)
        volume_data_down=pd.Series(volume_data_down,index=index)

        return volume_data_up,volume_data_down,on_balance_volume
