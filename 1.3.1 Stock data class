class Stock_Info:

    def __init__(self, connection, stock_symbol, start, end):
        self.symbol = stock_symbol
        self.all_info = pd.read_sql_query("SELECT* from stock_data", con=connection)
        self.all_info["Date"] = self.all_info["Date"].apply(trans)
        self.start = trans(start)
        self.end = trans(end)
        self.line_info = self.all_info[self.all_info["Symbol"] == self.symbol].set_index("Date")["Adj_Close"]
        self.line_info_volume = self.all_info[self.all_info["Symbol"] == self.symbol].set_index("Date")["Volume"]

    # get information for one year historical data

        start_temp=self.end-datetime.timedelta(days=365)
        while(start_temp not in self.line_info.index):
            start_temp-=datetime.timedelta(days=1)

        while (self.end not in self.line_info.index):
                self.end -= datetime.timedelta(days=1)
        self.oney_historical_selected_line_info=self.line_info[start_temp:self.end]

        diff_temp=np.diff(self.oney_historical_selected_line_info.values)
        self.oney_historical_selected_line_info=self.oney_historical_selected_line_info[:-1]
        self.oney_return=diff_temp/self.oney_historical_selected_line_info
        self.annual_avg_return=252*np.mean(self.oney_return)


    #get information for display
        while (self.start not in self.line_info.index):
            self.start += datetime.timedelta(days=1)


        self.selected_line_info = self.line_info[self.start:self.end]
        self.selected_line_info_volume=self.line_info_volume[self.start:self.end]
        # below is the data for candlestick~~~~
        self.selected_info=self.all_info[self.all_info["Symbol"] == self.symbol]

        self.selected_info=self.selected_info[(self.selected_info["Date"]>=self.start)&(self.selected_info["Date"]<=self.end)]


        self.candle_info=self.selected_info[["Date","Open","High","Low","Adj_Close"]]
        self.candle_info["Date"] = self.candle_info["Date"].apply(mdates.date2num)
        self.candle_info=self.candle_info.values.tolist()



    def candleprice(self):
        description_str=self.symbol+"'s candle chart "
        return description_str,self.candle_info

    def price(self):
        description_str = self.symbol + "'s close price"
        return description_str,self.selected_line_info

    def ma(self,window):
        description_str=self.symbol+"'s "+str(window)+" days moving average"
        return description_str,Stock_Methods.ma(self,window)
    def rsi(self,window):
        description_str = self.symbol + "'s " + str(window) + " days relative strength index"
        return description_str,Stock_Methods.rsi(self,window)


    def ewma(self,alpha):
        description_str = self.symbol + "'s Exponential weighted moving average (with span="+str(2 / alpha - 1)+")"
        return description_str,Stock_Methods.ewma(self,alpha)
    def bband(self,window,num_std):
        description_str1=self.symbol+"'s Upper Bollinger Band"+" ("+str(num_std)+" std(s), "+str(window)+" days)"
        description_str2 = self.symbol + "'s Lower Bollinger Band" + " (" + str(num_std) + " std(s), " + str(window) + " days)"
        description_str3 = self.symbol + "'s Middle Bollinger Band" + " (" + str(num_std) + " std(s), " + str(window) + " days)"
        upper,lower,middle=Stock_Methods.bband(self,window,num_std)
        return  description_str1,upper,description_str2,lower,description_str3,middle
    def MACD(self,span1=12,span2=26,span3=9):
        description_st1=self.symbol+"'s MACD(12-26) Line"
        description_st2=self.symbol+"'s MACD EMA(9) Line"
        description_st3=self.symbol+"'s MACD signal Line"
        macd,macd_ema,macd_sig=Stock_Methods.MACD(self,span1,span2,span3)
        return description_st1,macd,description_st2,macd_ema,description_st3,macd_sig
    def OBV(self):
        description_st1=self.symbol+"'s Trading volume(up)"
        description_st2=self.symbol+"'s Trading volume(dn)"
        description_st3=self.symbol+"'s on balance volume"
        volume_up,volume_down,obv=Stock_Methods.OBV(self)
        return description_st1,volume_up,description_st2,volume_down,description_st3,obv
