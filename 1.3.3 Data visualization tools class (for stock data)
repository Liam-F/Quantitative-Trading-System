class Chart_Factory:
  #global indicator
  indicator=0
  def __init__(self):
      self.portfolio={}
      self.data_stack={}
      self.price_data={}
      self.candleprice_data={}
      self.subline_rsi={}
      self.subline_macd={}
      self.subline_obv={}
      self.current_indicator=0
      self.figure_map={"candle":False,"price":False,"rsi":False,"macd":False,"obv":False,"portfolio":False}


 # This is a cheap shot, has to be mended later on~~~~~
  def add_index(self,stockticker):
      self.index=stockticker.price()[1].index

  def push_data(self,method,isprice=False,iscandle=False,issubline_rsi=False,issubline_macd=False,issubline_obv=False,isportolio=False):

      if (iscandle):
          index, value = method
          self.candleprice_data[index] = value
          self.figure_map["candle"]=True
      elif (isprice):
          index, value = method
          self.price_data[index] = value
          self.figure_map["price"]=True
      elif(isportolio):
          index,value=method
          self.portfolio[index]=value
          self.figure_map["portfolio"]=True
      elif(issubline_rsi):
          self.indicator += 1
          index, value = method
          self.subline_rsi[index] = value
          self.figure_map["rsi"]=True
      elif(issubline_macd):
          self.indicator += 1
          # index,value=method
          # self.subline_macd[index]=value
          for i in range(0, len(method), 2):
              index = method[i]
              value = method[1 + i]
              self.subline_macd[index] = value
          self.figure_map["macd"]=True

      elif(issubline_obv):
          self.indicator += 1
          for i in range(0, len(method), 2):
              index = method[i]
              value = method[1 + i]
              self.subline_obv[index] = value
          self.figure_map["obv"] = True

      else:
           for i in range(0,len(method),2):
            index=method[i]
            value=method[1+i]
            self.data_stack[index]=value

  def plot_price(self,ax):
      ax=ax

      for i in self.price_data:
          index = self.price_data[i].index
          data = self.price_data[i].values
          ind = np.arange(len(index))  #
          formatter = MyFormatter(index)  #

          ax.xaxis.set_major_formatter(formatter)  #
          ax.plot(ind, data)  #
          formatter = ticker.FormatStrFormatter('$%1.2f')
          ax.yaxis.set_major_formatter(formatter)
          min_temp = np.min(data)
          max_temp=np.max(data)
          plt.xticks()

          ######designed for equally display codes!!!!!!!
          date_min = np.min(ind)
          date_max = np.max(ind)
          plt.xlim([date_min, date_max])
          density_temp = len(ind) / 20
          zip = np.arange(date_min, date_max, density_temp + 1)

          plt.xticks(zip)


          #start text
          tickerr="AAPL"
          current_price = Share(tickerr).get_price()  # latest
          open_price = Share(tickerr).get_open()
          high_price=Share(tickerr).get_days_high()
          low_price=Share(tickerr).get_days_low()
          change_price = Share(tickerr).get_change()
          current_time = Share(tickerr).get_trade_datetime()
          Last_price=Share(tickerr).get_prev_close()
          volume=Share(tickerr).get_volume()


          current_price="Current: "+current_price
          open_price="Open: "+open_price
          high_price="High: "+high_price
          low_price="Low: "+low_price
          Last_price="Last: "+Last_price
          change_price="Chg: "+change_price
          volume="Volume: "+volume
          ss=current_time+'    '+ current_price+"    "+open_price+"    "+high_price+"    "+low_price+"    "+Last_price+"    "+volume+"    "\
          +change_price

          plt.text(date_min+2,max_temp+12,ss,fontsize=15)




          ax.fill_between(ind, min_temp - 10.0, data, color="lightsteelblue")
          # fig.autofmt_xdate()
          cursor1 = Cursor_haunter(ax, ind, data, "Close price", 1)



  def plot_other_data(self,ax):
      ax=ax
      for i in self.data_stack:
          index=self.data_stack[i].index
          data=self.data_stack[i].values
          ind = np.arange(len(index))  #
          formatter = MyFormatter(index)  #
          ax.xaxis.set_major_formatter(formatter)  #
          ax.plot(ind, data)  #
          # fig.autofmt_xdate()  #
          date_min = np.min(ind)
          date_max = np.max(ind)
          plt.xlim([date_min, date_max])







      plt.legend(self.price_data.keys()+self.data_stack.keys(),fontsize=12)

  def plot_candle_price(self,ax):
     ax=ax
     for i in self.candleprice_data:
         # minor ticks on the days

         list = self.candleprice_data[i]
         index = self.index
         # The 2 lines of code below this is really magnificent!!!
         for i in range(len(list)):
             list[i][0] = i
         ind = np.arange(len(index))  #
         formatter = MyFormatter(index)  #
         ax.xaxis.set_major_formatter(formatter)  #
         candle(ax, list, width=0.6)
         # fig.autofmt_xdate()
         #

     plt.title("", fontsize=20)
     plt.ylabel("Price/USD", fontsize=14)
     # plt.xlabel("Dates", fontsize=14)

  def plot_sub_rsi(self,ax,fig,gs):

      if (len(self.subline_rsi) != 0):

          plt.title(str(self.subline_rsi.keys()[0]), fontsize=13)
          for i in self.subline_rsi:
              index = self.subline_rsi[i].index
              data = self.subline_rsi[i].values
              overboughtband = data * 0 + 70
              oversoldband = data * 0 + 30

              ind = np.arange(len(index))  #
              formatter = MyFormatter(index)  #
              ax.xaxis.set_major_formatter(formatter)  #
              ax.plot(ind, data, color="tomato")  #
              # fig.autofmt_xdate()  #

              date_min = np.min(ind)
              date_max = np.max(ind)
              plt.xlim([date_min, date_max])

              cursor2 = Cursor_haunter(ax, ind, data, "Relative Strength Index:", 1)
              ax.plot(ind, overboughtband, '--', color="steelblue", linewidth=1.2, )
              ax.plot(ind, oversoldband, '--', color="steelblue", linewidth=1.2)



  def plot_sub_macd(self,ax,fig,gs):
      if (len(self.subline_macd) != 0):

          sig_temp=[x for x in self.subline_macd.keys() if "signal" in x]# since this kind of data should ne shown as a bar chart
          plt.title(str(self.subline_macd.keys()[0]), fontsize=13)
          for i in self.subline_macd:
               if i not in sig_temp:
                index = self.subline_macd[i].index
                data = self.subline_macd[i].values
                ind = np.arange(len(index))  #
                formatter = MyFormatter(index)  #
                ax.xaxis.set_major_formatter(formatter)  #
                ax.plot(ind, data,)  #
                # fig.autofmt_xdate()  #
                date_min = np.min(ind)
                date_max = np.max(ind)
                plt.xlim([date_min, date_max])



          index=self.subline_macd[sig_temp[0]].index
          data=self.subline_macd[sig_temp[0]].values
          ax.bar(ind, data,color="teal")
          # cursor2 = Cursor_haunter(ax, index, data, "MACD Signal:", 1)
          # the above line of code is remained to be seen sicne it is far too slow to run!!!!
          plt.legend(self.subline_macd.keys(), fontsize=12)


  def plot_sub_obv(self,ax,fig,gs):

      if (len(self.subline_obv) != 0):

          sig_temp = [x for x in self.subline_obv.keys() if "balance" in x]
          color_map = ["r", "g"]
          temp_i = 0
          plt.title(str(self.subline_obv.keys()[0]), fontsize=13)
          for i in self.subline_obv:
              if i not in sig_temp:
                  index = self.subline_obv[i].index
                  data = self.subline_obv[i].values

                  ind = np.arange(len(index))  #
                  formatter = MyFormatter(index)  #
                  ax.xaxis.set_major_formatter(formatter)  #

                  ax.bar(ind, data, color=color_map[temp_i])  #
                  # fig.autofmt_xdate()#
                  temp_i += 1
                  date_min = np.min(ind)
                  date_max = np.max(ind)
                  plt.xlim([date_min, date_max])

          index = self.subline_obv[sig_temp[0]].index
          data = self.subline_obv[sig_temp[0]].values
          ind = np.arange(len(index))  #
          formatter = MyFormatter(index)  #
          ax.xaxis.set_major_formatter(formatter)  #
          ax.plot(ind, data)  #
          cursor2 = Cursor_haunter(ax, ind, data, "On Balance Volume:", 1)
          # fig.autofmt_xdate()  #

          plt.legend(["OBV", "Trading volume"], fontsize=12)


  def plot_all(self):
      fig=plt.figure()
      plot_map_1=[3]
      plot_map_2=[3,1]
      plot_map_3 = [3,1,1]
      plot_map_4 = [3,1,1,1]
      plot_map=[plot_map_1,plot_map_2,plot_map_3,plot_map_4]

      gs = gridspec.GridSpec(self.indicator+1, 1, height_ratios=plot_map[self.indicator])

      ax = fig.add_subplot(gs[self.current_indicator])
      # ax.set_axis_bgcolor('darkslategray')
      self.plot_price(ax)
      self.plot_other_data(ax)
      self.plot_candle_price(ax)

      if(self.figure_map["rsi"]):
       self.current_indicator+=1
       ax = fig.add_subplot(gs[self.current_indicator], sharex=ax)

       self.plot_sub_rsi(ax,fig,gs)


      if(self.figure_map["macd"]):
       self.current_indicator +=1
       ax = fig.add_subplot(gs[self.current_indicator], sharex=ax)
       self.plot_sub_macd(ax,fig,gs)



      if(self.figure_map["obv"]):
       self.current_indicator +=1
       ax = fig.add_subplot(gs[self.current_indicator], sharex=ax)
       self.plot_sub_obv(ax,fig,gs)

      plt.show()
