class Chart_Factory_Portfolio:
  #global indicator
  indicator2=0
  def __init__(self):
      self.portfolio={}
      self.current_indicator=0
      self.figure_map={"portfolio":False,"weights":False}

  def push_data(self,method,isportfolio=False,isweight=False):

      if(isportfolio):
          index,value=method
          self.portfolio[index]=value
          self.figure_map["portfolio"]=True

      if(isweight):
           self.indicator2+=1
           index,value=method
           self.portfolio[index]=value
           self.figure_map["weights"]=True

  def plot_portfolio_val(self,ax):
          ax=ax
          index = self.portfolio["Portfolio Value: "].index
          data = self.portfolio["Portfolio Value: "].values
          ind = np.arange(len(index))  #
          formatter = MyFormatter(index)  #

          ax.xaxis.set_major_formatter(formatter)  #
          ax.plot(ind, data,color="orange")  #
          formatter = ticker.FormatStrFormatter('$%1.2f')
          ax.yaxis.set_major_formatter(formatter)
          min_temp = np.min(data)
          max_temp=np.max(data)
          plt.xticks()

          date_min = np.min(ind)
          date_max = np.max(ind)
          plt.xlim([date_min, date_max])

          ######designed for equally display codes!!!!!!

          ax.fill_between(ind,0, data, color="navajowhite")
          # fig.autofmt_xdate()
          # cursor1 = Cursor_haunter(ax, ind, data, "Portfolio Value", 1)

  def plot_weights(self,ax):
      ax=ax
      if (len(self.portfolio["weights"]) != 0):

          index=self.portfolio["weights"].index
          data=self.portfolio["weights"].values
          fake=np.arange(len(index))
          plt.xticks(fake,index)
          plt.bar(fake,data,color=["limegreen","deepskyblue","plum","darkorange","tomato","y"])
          # xxx=self.portfolio["weights"]
          # xxx.plot(kind="bar",color="salmon",colour=["limegreen","deepskyblue","plum","darkslategray","r"])
          # ax.bar(index, data, color="green")  #
          # plt.legend(["OBV", "Trading volume"], fontsize=12)

  def plot_all(self):
      fig=plt.figure()
      plot_map_1=[3]
      plot_map_2=[3,1]
      plot_map_3 = [3,1,1]
      plot_map_4 = [3,1,1,1]
      plot_map=[plot_map_1,plot_map_2,plot_map_3,plot_map_4]

      gs = gridspec.GridSpec(self.indicator2+1, 1, height_ratios=plot_map[self.indicator2])
      ax = fig.add_subplot(gs[self.current_indicator])
      # ax.set_axis_bgcolor('darkslategray')
      self.plot_portfolio_val(ax)

      if (self.figure_map["weights"]):

          self.current_indicator += 1
          ax = fig.add_subplot(gs[self.current_indicator])
          self.plot_weights(ax)



      plt.show()
